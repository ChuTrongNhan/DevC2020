{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Documents\\\\DevC\\\\Assignment\\\\Week2\\\\my-profile\\\\components\\\\MyText.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport * as Font from \"expo-font\";\nimport { AppLoading } from \"expo\";\n\nvar fetchFonts = function fetchFonts() {\n  return Font.loadAsync({\n    \"sultan-nahia\": require(\"../assets/fonts/SultanNahia.ttf\"),\n    \"avo-reg\": require(\"../assets/fonts/SVN-Avo.ttf\"),\n    \"avo-bold\": require(\"../assets/fonts/SVN-AvoBold.ttf\")\n  });\n};\n\nvar MyBlackText = function MyBlackText(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      dataLoaded = _useState2[0],\n      setDataLoaded = _useState2[1];\n\n  if (!dataLoaded) {\n    return React.createElement(AppLoading, {\n      startAsync: fetchFonts,\n      onFinish: function onFinish() {\n        return setDataLoaded(true);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 7\n      }\n    });\n  }\n\n  return React.createElement(Text, {\n    style: _objectSpread(_objectSpread({}, props.style), {}, {\n      fontFamily: \"sultan-nahia\",\n      color: props.color ? props.color : \"black\",\n      fontSize: props.size ? props.size : 14\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nvar MyText = function MyText(props) {\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      dataLoaded = _useState4[0],\n      setDataLoaded = _useState4[1];\n\n  if (!dataLoaded) {\n    return React.createElement(AppLoading, {\n      startAsync: fetchFonts,\n      onFinish: function onFinish() {\n        return setDataLoaded(true);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }\n    });\n  }\n\n  return React.createElement(Text, {\n    style: _objectSpread(_objectSpread({}, props.style), {}, {\n      color: props.color ? props.color : \"black\",\n      fontSize: props.size ? props.size : 14\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nvar MyBoldText = function MyBoldText(props) {\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      dataLoaded = _useState6[0],\n      setDataLoaded = _useState6[1];\n\n  if (!dataLoaded) {\n    return React.createElement(AppLoading, {\n      startAsync: fetchFonts,\n      onFinish: function onFinish() {\n        return setDataLoaded(true);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    });\n  }\n\n  return React.createElement(Text, {\n    style: _objectSpread(_objectSpread({}, props.style), {}, {\n      fontFamily: \"avo-bold\",\n      color: props.color ? props.color : \"black\",\n      fontSize: props.size ? props.size : 14\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport { MyText, MyBoldText, MyBlackText };","map":{"version":3,"sources":["C:/Users/Admin/Documents/DevC/Assignment/Week2/my-profile/components/MyText.js"],"names":["React","useState","useEffect","Font","AppLoading","fetchFonts","loadAsync","require","MyBlackText","props","dataLoaded","setDataLoaded","style","fontFamily","color","fontSize","size","children","MyText","MyBoldText"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Text } from \"react-native\";\r\nimport * as Font from \"expo-font\";\r\nimport { AppLoading } from \"expo\";\r\n\r\nconst fetchFonts = () => {\r\n  return Font.loadAsync({\r\n    \"sultan-nahia\": require(\"../assets/fonts/SultanNahia.ttf\"),\r\n    \"avo-reg\": require(\"../assets/fonts/SVN-Avo.ttf\"),\r\n    \"avo-bold\": require(\"../assets/fonts/SVN-AvoBold.ttf\"),\r\n  });\r\n};\r\n\r\nconst MyBlackText = (props) => {\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n\r\n  if (!dataLoaded) {\r\n    return (\r\n      <AppLoading\r\n        startAsync={fetchFonts}\r\n        onFinish={() => setDataLoaded(true)}\r\n      />\r\n    );\r\n  }\r\n  return (\r\n    <Text\r\n      style={{\r\n        ...props.style,\r\n        fontFamily: \"sultan-nahia\",\r\n        color: props.color ? props.color : \"black\",\r\n        fontSize: props.size ? props.size : 14,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </Text>\r\n  );\r\n};\r\n\r\nconst MyText = (props) => {\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n\r\n  if (!dataLoaded) {\r\n    return (\r\n      <AppLoading\r\n        startAsync={fetchFonts}\r\n        onFinish={() => setDataLoaded(true)}\r\n      />\r\n    );\r\n  }\r\n  return (\r\n    <Text\r\n      style={{\r\n        ...props.style,\r\n        color: props.color ? props.color : \"black\",\r\n        fontSize: props.size ? props.size : 14,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </Text>\r\n  );\r\n};\r\n\r\nconst MyBoldText = (props) => {\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n\r\n  if (!dataLoaded) {\r\n    return (\r\n      <AppLoading\r\n        startAsync={fetchFonts}\r\n        onFinish={() => setDataLoaded(true)}\r\n      />\r\n    );\r\n  }\r\n  return (\r\n    <Text\r\n      style={{\r\n        ...props.style,\r\n        fontFamily: \"avo-bold\",\r\n        color: props.color ? props.color : \"black\",\r\n        fontSize: props.size ? props.size : 14,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </Text>\r\n  );\r\n};\r\n\r\nexport { MyText, MyBoldText, MyBlackText };\r\n"]},"metadata":{},"sourceType":"module"}